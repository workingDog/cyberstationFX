package controllers

import javafx.fxml.FXML

import com.jfoenix.controls.{JFXButton, JFXListView, JFXTextArea}
import com.kodekutters.stix.Malware
import cyber._

import scala.language.implicitConversions
import scalafx.Includes._
import scalafx.scene.control.Label
import scalafx.scene.input.MouseEvent
import scalafxml.core.macros.{nested, sfxml}


/**
  * the Malware controller
  */
trait MalwareControllerInterface extends BaseControllerInterface

@sfxml
class MalwareController(@FXML theListView: JFXListView[MalwareForm],
                        @FXML addButton: JFXButton,
                        @FXML deleteButton: JFXButton,
                        bundleLabel: Label,
                        @nested[CommonController] commonController: CommonControllerInterface,
                        @nested[MalwareSpecController] malwareSpecController: MalwareSpecControllerInterface)
  extends MalwareControllerInterface {

  // the base controller for the common properties
  val baseForm = new BaseFormController(Malware.`type`, theListView.asInstanceOf[JFXListView[CyberObj]],
    bundleLabel, commonController, malwareSpecController)

  deleteButton.setOnMouseClicked((_: MouseEvent) => baseForm.doDelete())
  addButton.setOnMouseClicked((_: MouseEvent) => baseForm.doAdd(new MalwareForm()))

  // give the base controller the BundleViewControllerInterface, so it can refer to it
  def setBundleViewController(controller: BundleViewControllerInterface): Unit = baseForm.setBundleViewController(controller)

}

/**
  * the controller for all Malware specific properties, i.e. other than the common ones
  */
trait MalwareSpecControllerInterface extends BaseSpecControllerInterface

@sfxml
class MalwareSpecController(@FXML descriptionField: JFXTextArea,
                            @FXML deleteKFButton: JFXButton,
                            @FXML addKFButton: JFXButton,
                            @FXML killPhaseListView: JFXListView[KillChainPhaseForm]
                           ) extends MalwareSpecControllerInterface {

  var currentForm: MalwareForm = _

  val killPhaseSupport = new KillChainPhaseHelper(killPhaseListView, addKFButton, deleteKFButton)

  private def loadValues(): Unit = {
    descriptionField.setText(currentForm.description.value)
    killPhaseListView.setItems(currentForm.kill_chain_phases)
  }

  def clear(): Unit = {
    unbindAll()
    descriptionField.setText("")
    killPhaseListView.setItems(null)
  }

  private def unbindAll(): Unit = {
    if (currentForm != null) {
      killPhaseListView.items.unbind()
      killPhaseListView.setItems(null)
      currentForm = null
    }
  }

  def control[MalwareForm](stix: MalwareForm, controller: Option[BundleViewControllerInterface]): Unit = {
    unbindAll()
    if (stix != null) {
      currentForm = stix.asInstanceOf[cyber.MalwareForm]
      killPhaseSupport.setCurrentForm(currentForm)
      loadValues()
      // bind the form to the UI
      currentForm.description <== descriptionField.textProperty()
    }
  }

}